{
  "title": "Simple JSON prompt",
  "description": "Asks a question and then asks for a JSON object as an answer. The JSON object is validated against a schema.",
  "version": "0.0.1",
  "edges": [
    {
      "from": "lambda-1",
      "to": "invoke-3",
      "out": "board",
      "in": "lambda"
    },
    {
      "from": "invoke-3",
      "to": "analysis",
      "out": "completion",
      "in": "text"
    },
    {
      "from": "promptTemplate-2",
      "to": "invoke-3",
      "out": "prompt",
      "in": "text"
    },
    {
      "from": "scene",
      "to": "promptTemplate-2",
      "out": "text",
      "in": "scene"
    }
  ],
  "nodes": [
    {
      "id": "lambda-1",
      "type": "lambda",
      "configuration": {
        "board": {
          "kind": "board",
          "board": {
            "edges": [
              {
                "from": "secrets-3",
                "to": "generateText-4",
                "constant": true,
                "out": "PALM_KEY",
                "in": "PALM_KEY"
              },
              {
                "from": "input-1",
                "to": "generateText-4",
                "out": "text",
                "in": "text"
              },
              {
                "from": "generateText-4",
                "to": "validateJson-5",
                "out": "completion",
                "in": "json"
              },
              {
                "from": "runJavascript-6",
                "to": "output-2",
                "out": "json",
                "in": "completion"
              },
              {
                "from": "validateJson-5",
                "to": "runJavascript-6",
                "out": "json",
                "in": "json"
              },
              {
                "from": "input-1",
                "to": "runJavascript-6",
                "out": "text",
                "in": "text"
              },
              {
                "from": "generateText-4",
                "to": "jsonata-7",
                "out": "completion",
                "in": "completion"
              },
              {
                "from": "input-1",
                "to": "validateJson-5",
                "out": "schema",
                "in": "schema"
              },
              {
                "from": "validateJson-5",
                "to": "jsonata-7",
                "out": "error",
                "in": "error"
              },
              {
                "from": "runJavascript-6",
                "to": "jsonata-7",
                "out": "error",
                "in": "error"
              }
            ],
            "nodes": [
              {
                "id": "input-1",
                "type": "input"
              },
              {
                "id": "output-2",
                "type": "output"
              },
              {
                "id": "secrets-3",
                "type": "secrets",
                "configuration": {
                  "keys": [
                    "PALM_KEY"
                  ]
                }
              },
              {
                "id": "generateText-4",
                "type": "generateText",
                "configuration": {}
              },
              {
                "id": "validateJson-5",
                "type": "validateJson",
                "configuration": {
                  "schema": {
                    "$schema": "http://json-schema.org/draft-07/schema#",
                    "type": "object",
                    "properties": {
                      "people": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/Person"
                        }
                      },
                      "relationships": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/Relationship"
                        }
                      }
                    },
                    "definitions": {
                      "Person": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "age": {
                            "type": "integer",
                            "minimum": 0
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "Relationship": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "friend",
                              "colleague",
                              "parent",
                              "child",
                              "sibling",
                              "spouse",
                              "other"
                            ]
                          },
                          "person1Name": {
                            "type": "string"
                          },
                          "person2Name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "person1Name",
                          "person2Name"
                        ]
                      }
                    }
                  }
                }
              },
              {
                "id": "runJavascript-6",
                "type": "runJavascript",
                "configuration": {
                  "name": "checker",
                  "code": "function checker({ text, json, }) {\n        const notFound = json.people.filter((person) => person.age && text.indexOf(`${person.age}`) === -1);\n        if (notFound.length > 0)\n            return {\n                error: {\n                    message: `Age not found in scene for ${notFound\n                        .map((person) => person.name)\n                        .join(\", \")}.`,\n                },\n            };\n        else\n            return { json };\n    }",
                  "raw": true
                }
              },
              {
                "id": "jsonata-7",
                "type": "jsonata",
                "configuration": {
                  "expression": "{ \"$error\": { \"error\": error, \"inputs\": { \"completion\": completion } } }",
                  "raw": true
                }
              }
            ],
            "kits": [
              {
                "title": "LLM Starter Kit",
                "description": "A kit that provides a few necessary components for wiring boards that use PaLM API.",
                "version": "0.0.1",
                "url": "npm:@google-labs/llm-starter"
              },
              {
                "url": "npm:@google-labs/node-nursery"
              }
            ]
          }
        }
      }
    },
    {
      "id": "scene",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Question",
              "description": "Describe a scene with multiple people, the LLM will try to map out the relationships between the people"
            }
          },
          "required": [
            "scene"
          ]
        }
      }
    },
    {
      "id": "promptTemplate-2",
      "type": "promptTemplate",
      "configuration": {
        "template": "You are a tool that given a scene understands the relationship between people and describes them in the following JSON schema. Age is optional, don't make it up. Only use the relations in the schema:\n\n{{schema}}\n\nScene:\n{{scene}}\n",
        "schema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"people\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Person\"}},\"relationships\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/Relationship\"}}},\"definitions\":{\"Person\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"age\":{\"type\":\"integer\",\"minimum\":0}},\"required\":[\"name\"]},\"Relationship\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"friend\",\"colleague\",\"parent\",\"child\",\"sibling\",\"spouse\",\"other\"]},\"person1Name\":{\"type\":\"string\"},\"person2Name\":{\"type\":\"string\"}},\"required\":[\"type\",\"person1Name\",\"person2Name\"]}}}"
      }
    },
    {
      "id": "invoke-3",
      "type": "invoke",
      "configuration": {
        "path": "./retry.json"
      }
    },
    {
      "id": "analysis",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Graph of people and relationships",
              "description": "JSON object describing the scene"
            }
          },
          "required": [
            "text"
          ]
        }
      }
    }
  ],
  "kits": [
    {
      "title": "LLM Starter Kit",
      "description": "A kit that provides a few necessary components for wiring boards that use PaLM API.",
      "version": "0.0.1",
      "url": "npm:@google-labs/llm-starter"
    },
    {
      "url": "npm:@google-labs/node-nursery"
    }
  ]
}