{
  "title": "OpenAI GPT-3.5-turbo",
  "description": "This board is the simplest possible invocation of OpenAI's GPT-3.5 API to generate text.",
  "version": "0.0.1",
  "edges": [
    {
      "from": "secrets-1",
      "to": "makeHeaders",
      "out": "OPENAI_API_KEY",
      "in": "json"
    },
    {
      "from": "input",
      "to": "makeMessages",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input",
      "to": "callOpenAI",
      "out": "useStreaming",
      "in": "stream"
    },
    {
      "from": "makeHeaders",
      "to": "callOpenAI",
      "out": "result",
      "in": "headers"
    },
    {
      "from": "makeMessages",
      "to": "getNewContext",
      "out": "result",
      "in": "messages"
    },
    {
      "from": "lambda-2",
      "to": "transformStream-3",
      "constant": true,
      "out": "board",
      "in": "board"
    },
    {
      "from": "formatTools",
      "to": "makeBody",
      "out": "result",
      "in": "tools"
    },
    {
      "from": "input",
      "to": "formatTools",
      "out": "tools",
      "in": "json"
    },
    {
      "from": "input",
      "to": "makeBody",
      "out": "useStreaming",
      "in": "useStreaming"
    },
    {
      "from": "getResponse",
      "to": "textOutput",
      "out": "text",
      "in": "text"
    },
    {
      "from": "getResponse",
      "to": "toolCallsOutput",
      "out": "tool_calls",
      "in": "tool_calls"
    },
    {
      "from": "callOpenAI",
      "to": "getResponse",
      "out": "response",
      "in": "json"
    },
    {
      "from": "getNewContext",
      "to": "textOutput",
      "out": "result",
      "in": "context"
    },
    {
      "from": "callOpenAI",
      "to": "getNewContext",
      "out": "response",
      "in": "response"
    },
    {
      "from": "transformStream-3",
      "to": "streamOutput",
      "out": "stream",
      "in": "stream"
    },
    {
      "from": "callOpenAI",
      "to": "transformStream-3",
      "out": "stream",
      "in": "stream"
    },
    {
      "from": "makeBody",
      "to": "callOpenAI",
      "out": "result",
      "in": "body"
    },
    {
      "from": "makeMessages",
      "to": "makeBody",
      "out": "result",
      "in": "messages"
    },
    {
      "from": "input",
      "to": "makeMessages",
      "out": "text",
      "in": "text"
    }
  ],
  "nodes": [
    {
      "id": "input",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Text",
              "description": "The text to generate"
            },
            "tools": {
              "type": "array",
              "title": "Tools",
              "description": "An array of functions to use for tool-calling",
              "items": {
                "type": "string"
              },
              "default": "[]"
            },
            "context": {
              "type": "array",
              "title": "Context",
              "description": "An array of messages to use as conversation context",
              "items": {
                "type": "object"
              },
              "default": "[]"
            },
            "useStreaming": {
              "type": "boolean",
              "title": "Stream",
              "description": "Whether to stream the output",
              "default": "false"
            }
          },
          "required": [
            "text"
          ]
        }
      }
    },
    {
      "id": "textOutput",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Text",
              "description": "The generated text"
            },
            "context": {
              "type": "array",
              "title": "Context",
              "description": "The conversation context"
            }
          }
        }
      }
    },
    {
      "id": "toolCallsOutput",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "tool_calls": {
              "type": "object",
              "title": "Tool Calls",
              "description": "The generated tool calls"
            }
          }
        }
      }
    },
    {
      "id": "streamOutput",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "stream": {
              "type": "object",
              "title": "Stream",
              "format": "stream",
              "description": "The generated text"
            }
          }
        }
      }
    },
    {
      "id": "makeHeaders",
      "type": "jsonata",
      "configuration": {
        "expression": "{\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer \" & $\n  }"
      }
    },
    {
      "id": "secrets-1",
      "type": "secrets",
      "configuration": {
        "keys": [
          "OPENAI_API_KEY"
        ]
      }
    },
    {
      "id": "makeMessages",
      "type": "jsonata",
      "configuration": {
        "expression": "$append($boolean($.context) ? $.context, [{ \"role\": \"user\", \"content\": $.text }])"
      }
    },
    {
      "id": "makeBody",
      "type": "jsonata",
      "configuration": {
        "expression": "{\n    \"model\": \"gpt-3.5-turbo-1106\",\n    \"messages\": $.messages,\n    \"stream\": $.useStreaming,\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"tools\": $count($.tools) > 0 ? $.tools,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0\n  }"
      }
    },
    {
      "id": "callOpenAI",
      "type": "fetch",
      "configuration": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST"
      }
    },
    {
      "id": "getResponse",
      "type": "jsonata",
      "configuration": {
        "expression": "choices[0].message.{\n    \"text\": $boolean(content) ? content,\n    \"tool_calls\": tool_calls.function ~> | $ | { \"args\": $eval(arguments) }, \"arguments\" |\n}",
        "raw": true
      }
    },
    {
      "id": "getNewContext",
      "type": "jsonata",
      "configuration": {
        "expression": "$append(messages, response.choices[0].message)"
      }
    },
    {
      "id": "lambda-2",
      "type": "lambda",
      "configuration": {
        "board": {
          "kind": "board",
          "board": {
            "edges": [
              {
                "from": "transformChunk",
                "to": "output-2",
                "out": "result",
                "in": "chunk"
              },
              {
                "from": "input-1",
                "to": "transformChunk",
                "out": "chunk",
                "in": "json"
              }
            ],
            "nodes": [
              {
                "id": "input-1",
                "type": "input"
              },
              {
                "id": "output-2",
                "type": "output"
              },
              {
                "id": "transformChunk",
                "type": "jsonata",
                "configuration": {
                  "expression": "choices[0].delta.content ? choices[0].delta.content : \"\""
                }
              }
            ],
            "kits": [
              {
                "url": "npm:@google-labs/llm-starter"
              }
            ]
          }
        }
      }
    },
    {
      "id": "transformStream-3",
      "type": "transformStream",
      "configuration": {}
    },
    {
      "id": "formatTools",
      "type": "jsonata",
      "configuration": {
        "expression": "[$.{ \"type\": \"function\", \"function\": $ }]"
      }
    }
  ],
  "kits": [
    {
      "url": "npm:@google-labs/llm-starter"
    },
    {
      "url": "npm:@google-labs/core-kit"
    },
    {
      "url": "npm:@google-labs/node-nursery-web"
    }
  ]
}